<?php

namespace App\Models;

use App\Http\Controllers\Traits\CommonLogTrait;
use App\Http\Controllers\Traits\SendEmailTrait;
use App\Models\Aml;
use App\Models\Deposit;
use App\Models\Merchant;
use App\Models\Ticket;
use App\models\Transaction;
use App\Models\Usergroup;
use App\Models\UserUsergroup;
use App\Models\Withdrawal;
use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\Session;
use Jenssegers\Date\Date;
use Illuminate\Foundation\Auth\User as Authenticatable;

use App\Models\Wallet;
use App\Models\Currency;
use App\Models\UsergroupRole;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;

class User extends Authenticatable
{
    use Notifiable, SendEmailTrait, CommonLogTrait;

    const CUSTOMER = 0;
    const ADMIN = 1;
    const MERCHANT = 2;

    const USER_TYPES = [
        1 => 'Not Verified',
        2 => 'Verified',
        3 => 'Verified Plus'
    ];

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email','company_id','language','password','phone'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /*
     * user column activated_at data will insert at creating
     */

    /*protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($user) {
            $activated_at = \Carbon\Carbon::createFromFormat('Y-m-d H:i:s', \Carbon\Carbon::now());
            $user->activated_at = $activated_at;
        });
    }*/

    public function add_user($data)
    {
        $this->first_name = (!empty($data["first_name"])) ? $data["first_name"] : '';
        $this->last_name = (!empty($data["last_name"])) ? $data["last_name"] : '';
        $this->name = (!empty($data["cname"])) ? $data["cname"] : $this->first_name . ' ' . $this->last_name;
        $this->username = (!empty($data["username"])) ? $data["username"] : '';
        $this->email = (!empty($data["email"])) ? $data["email"] : '';
        $this->phone = (!empty($data["user_phone"])) ? $data["user_phone"] : '';
        $this->password = bcrypt((!empty($data["password"])) ? $data["password"] : '');
        $this->img_path = (!empty($data["profile"])) ? $data["profile"] : '';
        $this->language = (!empty($data["language"])) ? $data["language"] : 'en';
        $this->company_id = (!empty($data["company_id"])) ? $data["company_id"] : 0;
        $this->fb_id = (!empty($data["fb_id"])) ? $data["fb_id"] : '';
        $this->permission_version = (!empty($data["permission_version"])) ? $data["permission_version"] : 0;
        $this->status = (!empty($data["status"])) ? $data["status"] : 1;
        $this->is_admin_verified = (!empty($data["is_admin_verified"])) ? $data["is_admin_verified"] : 0;
        $this->user_type = (!empty($data["user_type"])) ? $data["user_type"] : 0;
        $this->save();
        return $this;

    }

    public function userGroup()
    {
        return $this->belongsToMany('App\Models\Usergroup', 'user_usergroups', 'user_id', 'usergroup_id');
    }

    public function scopeSearch($query, $s)
    {
        return $query->where('email', 'like', '%' . $s . '%')
            ->orWhere('name', 'like', '%' . $s . '%');
    }

    public function company()
    {
        return $this->belongsTo('App\Models\Company');
    }

    public function merchants()
    {
        return $this->hasOne(Merchant::class);
    }

    public function displayGlobalDate($date, $lang = "")
    {

        $result = $date;
        if (empty($lang)) {
            $lang = app()->getLocale();
        }
        //dd($lang);
        if ($lang == "tr") {
            //setlocale(LC_TIME, 'tr_TR');
            $result = Date::parse($date)->format('j F Y');
            //dd($result);
        } else {
            $result = date('d M Y', strtotime($date));
        }
        //dd($result);
        return $result;
    }

    public function displayUsername($id)
    {

        if ($this->find($id)) {
            $user = $this->find($id)->firstOrFail();
            $name = $user->name;
        } else {
            $name = '';
        }
        return $name;
    }

    public function currentCurrency()
    {
        if (!is_null($this->currentWallet())) {
            return $this->currentWallet()->currency;
        }
        $currency = Currency::first();
        $wallet = $this->newWallet($currency->id);
        $this->currency_id = $currency->id;
        $this->save();
        return $currency;
    }

    public function walletsCollection()
    {
        return $this->hasMany(\App\Models\Wallet::class);
    }

    public function currentWallet()
    {
        if (Currency::where('id', $this->currency_id)->first() != NULL) {
            return $this->walletsCollection()->with('Currency')->where('currency_id', $this->currency_id)->first();
        }

        $currency = Currency::first();
        $this->currency_id = $currency->id;
        $this->save();

        return Wallet::with('Currency')->where('currency_id', $this->currency_id)->first();
    }

    public function newWallet($currency_id)
    {
        return Wallet::create([
            'user_id' => $this->id,
            'currency_id' => $currency_id,
            'amount' => 0
        ]);
    }

    public function RecentActivity()
    {
        return $this->hasMany(\App\Models\Transaction::class);
    }

    public function walletByCurrencyId($id)
    {
        if (!is_null($this->walletsCollection()->with('Currency')->where('currency_id', $id)->first())) {
            return $this->walletsCollection()->with('Currency')->where('currency_id', $id)->first();
        }
        return $this->newWallet($id);
    }

    public function createLog($data)
    {
        $json_data = json_encode($data);
        Log::info($json_data);
    }

    // For OTP
    public function OTP()
    {
        return Cache::get($this->OTPKey());
    }

    public function OTPKey()
    {
        return "OTP_for_{$this->id}";
    }

    public function cacheTheOTP()
    {
        $OTP = rand(100000, 999999);
        Cache::put([$this->OTPKey() => $OTP], now()->addSeconds(60 * 5));
        return $OTP;
    }

    public static function is_data_exits($id = null)
    {
        $transaction = Transaction::where('user_id', $id)->first();
        $merchant = Merchant::where('user_id', $id)->first();
        $deposit = Deposit::where('user_id', $id)->first();
        $aml = Aml::where('user_id', $id)->first();
        $withdrawal = Withdrawal::where('user_id', $id)->first();
        $ticket = Ticket::where('user_id', $id)->first();
        $wallet = Wallet::where('user_id', $id)->first();
        if ($transaction == null && $merchant == null && $deposit == null && $aml == null && $withdrawal == null && $ticket == null && $wallet == null) {
            return false;
        } else {
            return true;
        }
    }

    public function sendPasswordResetNotification($token)
    {
        $message['token'] = $token;
        $message['name'] = $this->name;
        $emailTemplate = "admin_forget_password.admin_forget_password";
        $adminEmail = Config::get('constants.defines.MAIL_FROM_ADDRESS');
        $this->sendEmail($message, "forget_password", $adminEmail, $this->email,
            "", $emailTemplate, $this->language);
    }

    public function getUserById($id)
    {
        return User::with('userGroup', 'userGroup.role')->find($id);
    }

    public function getUserDetailsById($user_id){
        $query = $this->where('id',$user_id)->first();
        return $query;
    }

    public function country()
    {
        return $this->hasOne(\App\Models\Country::class, 'id', 'country');
    }

    public function hasPermissionOnAction($routeName)
    {
        $permittedRouteNames = Session::get('permittedRouteNames');
        if (in_array(trim($routeName), $permittedRouteNames)) {
            return true;
        }
        return false;
    }

    public function masked_name($user)
    {
        $str = "";
        $str .= substr($user->first_name,0,0) . "***" . substr($user->last_name,1,1) . "***";
        return $str;
    }

    public function isGlobalAdmin($user_id){
        $userGroups = UserUsergroup::where('user_id',$user_id)->get();
        foreach ($userGroups as $group){
            if($group->usergroup_id == \config('constants.defines.GA_USERGROUP_ID')){
                return true;
            }
        }
        return false;
    }

    public function isFinanceDeptUser($user_id){
        $userGroups = UserUsergroup::where('user_id',$user_id)->get();
        foreach ($userGroups as $group){
            if($group->usergroup_id == \config('constants.defines.FDU_USERGROUP_ID')){
                return true;
            }
        }
        return false;
    }

    // For Adding Merchant User
    public function saveUser($data)
    {
        list($status, $errors) = $this->validateUser($data);
        if (!$status) {
            return [$status, $errors];
        }

        $this->first_name = (!empty($data["first_name"])) ? $data["first_name"] : '';
        $this->last_name = (!empty($data["last_name"])) ? $data["last_name"] : '';
        $this->name = (!empty($data["cname"])) ? $data["cname"] : $this->first_name . ' ' . $this->last_name;
        $this->username = (!empty($data["username"])) ? $data["username"] : '';
        $this->email = (!empty($data["email"])) ? $data["email"] : '';
        $this->phone = (!empty($data["phone"])) ? $data["phone"] : '';
        $this->language = (!empty($data["language"])) ? $data["language"] : 'en';
        $this->company_id = (!empty($data["company_id"])) ? $data["company_id"] : 0;
        $this->permission_version = (!empty($data["permission_version"])) ? $data["permission_version"] : 0;
        $this->status = (!empty($data["status"])) ? $data["status"] : 1;
        $this->is_admin_verified = (!empty($data["is_admin_verified"])) ? $data["is_admin_verified"] : 0;
        $this->user_type = (!empty($data["user_type"])) ? $data["user_type"] : 0;
        $this->merchant_parent_user_id = (!empty($data["merchant_parent_user_id"])) ? $data["merchant_parent_user_id"] : 0;
        //$this->save();
        if ($data['isEdit'] ==  false) {
            $length = 8;
            $random_str = substr(str_shuffle(str_repeat($x = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', ceil($length/strlen($x)) )),1,$length);
            $this->password = bcrypt($random_str);
        }

        if ($this->save()) {
            $usergroupObj = new UsergroupRole();
            $usergroup = $usergroupObj->getUsergroupByRoleCompany($data['role_id'], $data['company_id']);
            $userusergroup = new UserUsergroup();
            $current_group = $userusergroup->getCurrentGroup($this->id, $data["company_id"]);
            if (!in_array($usergroup->id, $current_group)) {
                $userusergroup->deletePrevGroup($current_group);
                $userusergroup->insert_entry([
                    'user_id' => $this->id,
                    'company_id'=>$data["company_id"],
                    'usergroup_id'=>$usergroup->usergroup_id
                ]);
            }

            if ($data['isEdit'] ==  false) {
                $data = $this->toArray();
                $data['password'] = $random_str;
                $subject = 'User Created Email';
                $from = Config('app.SYSTEM_NO_REPLY_ADDRESS');
                $to = $this->email;
                $attachment = '';
                $template = 'merchant.user_create';
                $language = "tr";

                $this->sendEmail($data, $subject, $from, $to, $attachment, $template, $language);
            }
        }

        return [$status, $this];
    }

    public function validateUser(Array $data)
    {
        $status = true;
        $errors = [];
        if ($data['isEdit']) {
            $validation =  Validator::make($data, [
                'name' => 'required|string|max:255',
                'email' => [
                    'required', 'email',
                    Rule::unique('users')->ignore($data["email"], 'email'),
                ],
                'phone' => [
                    'required', 'max:50',
                    Rule::unique('users')->ignore($data["phone"], 'phone'),
                ],
                'is_admin_verified' => 'required',
                'role_id' => 'required|exists:roles,id'
            ]);
        } else {
            $validation =  Validator::make($data, [
                'name' => 'required|string|max:255',
                'email' => 'required|email|unique:users,email|string|max:255',
                'phone' => 'required|unique:users,phone|max:50',
                'is_admin_verified' => 'required',
                'role_id' => 'required|exists:roles,id'
            ]);
        }

        if($validation->fails()){
            $status = false;
            $errors = $validation->errors();
        }
        return [$status, $errors];
    }

    public function getByEmail($email)
    {
        return $this->where('email', $email)->first();
    }

    public function findUserById($id){
        return $this->where('id', $id)->first();
    }
}
